<!DOCTYPE html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>毕业论文演示 - 细胞自动机</title>
  <script type="text/javascript" src="scripts/helper.js"></script>
  <script type="text/javascript" src="scripts/core.js"></script>
  <script type="text/javascript" src="scripts/render.js"></script>
  <link rel="stylesheet" type="text/css" href="style/main.css" />
</head>
<body>
  <div class="console">
    模式:
    <select id="mode">
      <option value="0">DOM 直接刷新</option>
      <option value="1">DOM diff 刷新</option>
      <option value="2">Canvas 直接刷新</option>
      <option value="3">Canvas diff刷新</option>
    </select>
    &nbsp;&nbsp;&nbsp;&nbsp;
    Step: <span id="step">等待开始...</span>
    &nbsp;&nbsp;&nbsp;&nbsp;
    Step Time (ms): <span id="time">等待开始...</span> (min/avg/max :<span id="mark">等待开始...</span>)
    &nbsp;&nbsp;&nbsp;&nbsp;
    <button id="init">初始化</button>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <button id="load">加载基准测试图案</button>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <button id="start">开始</button>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <button id="stop">停止</button>
  </div>
  <div id="playground"></div>
  <script type="text/javascript">
    var mode = document.getElementById('mode')
    var playground = document.getElementById('playground')
    var step = document.getElementById('step')
    var time = document.getElementById('time')
    var mark = document.getElementById('mark')
    var initButton = document.getElementById('init')
    var loadButton = document.getElementById('load')
    var startButton = document.getElementById('start')
    var stopButton = document.getElementById('stop')

    mode.addEventListener('change', modechange)
    initButton.addEventListener('click', init)
    loadButton.addEventListener('click', load)
    startButton.addEventListener('click', start)
    stopButton.addEventListener('click', stop)

    var currentMode = 0
    var targetSize = [50, 50] // [v , h]
    var animitionTimer = null
    var timeInterval = 200
    var runningRecord = []

    Render.playground = playground
    Render.onClick = function (v, h) {
      CA.toogleCellValue(v, h)
    }
    Render.mode = parseInt(mode.value)

    CA.addEventListener('mutation', function (ev) {
      Render.setPlayGround(ev.target.current, ev.target.previous)
    })

    function modechange (ev) {
      CA.init(targetSize[0], targetSize[1])
      Render.mode = parseInt(ev.target.value)
    }

    function init() {
      CA.init(targetSize[0], targetSize[1])
      Render.initialPlayGround(CA.state)
    }

    function load () {
      // preserve
      var targetMap = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0 ,0 ,0 ,0 ,1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0 ,0 ,1 ,0 ,0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ,0 ,0 ,0 ,1 ,0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0 ,0 ,0 ,1 ,0 ,0 ,0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0 ,0 ,0 ,0 ,1 ,0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1 ,0 ,0 ,0 ,1 ,0 ,0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0 ,0 ,0 ,0 ,0 ,0 ,1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]

      CA.setState(targetMap)
    }

    function start () {
      // preserve
      clearInterval(animitionTimer)
      animitionTimer = setInterval(goNextStep, timeInterval)
    }

    function stop () {
      // preserve
      clearInterval(animitionTimer)
    }

    function goNextStep () {
      var startTime = performance.now()
      CA.goNextStep()
      var endTime = performance.now()
      var timeSpend = endTime - startTime
      step.innerHTML = CA.step
      time.innerHTML = timeSpend
      runningRecord.push(timeSpend)

      var max = 0
      var min = 0
      var sum = 0
      for (var markIndex = 0; markIndex < runningRecord.length; markIndex ++) {
        max = runningRecord[markIndex] > max ? runningRecord[markIndex] : max
        min = runningRecord[markIndex] < min ? runningRecord[markIndex] : min
        sum += runningRecord[markIndex]
      }

      mark.innerHTML = min + '/' + (sum / runningRecord.length).toFixed(2) + '/' + max
    }
  </script>
</body>
</html>
